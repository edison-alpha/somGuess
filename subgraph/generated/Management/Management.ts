// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class LeaderboardUpdated extends ethereum.Event {
  get params(): LeaderboardUpdated__Params {
    return new LeaderboardUpdated__Params(this);
  }
}

export class LeaderboardUpdated__Params {
  _event: LeaderboardUpdated;

  constructor(event: LeaderboardUpdated) {
    this._event = event;
  }

  get player(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get totalWinnings(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class StatsUpdated extends ethereum.Event {
  get params(): StatsUpdated__Params {
    return new StatsUpdated__Params(this);
  }
}

export class StatsUpdated__Params {
  _event: StatsUpdated;

  constructor(event: StatsUpdated) {
    this._event = event;
  }

  get player(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get isWin(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }

  get payout(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TransactionRecorded extends ethereum.Event {
  get params(): TransactionRecorded__Params {
    return new TransactionRecorded__Params(this);
  }
}

export class TransactionRecorded__Params {
  _event: TransactionRecorded;

  constructor(event: TransactionRecorded) {
    this._event = event;
  }

  get player(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get transactionId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Management__gameHistoryResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: boolean;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: boolean,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromBoolean(this.value7));
    return map;
  }

  getPlayer(): Address {
    return this.value0;
  }

  getBetAmount(): BigInt {
    return this.value1;
  }

  getCorrectNumber(): BigInt {
    return this.value2;
  }

  getUserGuess(): BigInt {
    return this.value3;
  }

  getPayout(): BigInt {
    return this.value4;
  }

  getGasUsed(): BigInt {
    return this.value5;
  }

  getTimestamp(): BigInt {
    return this.value6;
  }

  getIsWin(): boolean {
    return this.value7;
  }
}

export class Management__getLeaderboardResultValue0Struct extends ethereum.Tuple {
  get player(): Address {
    return this[0].toAddress();
  }

  get totalWinnings(): BigInt {
    return this[1].toBigInt();
  }
}

export class Management__getPlayerStatsResultValue0Struct extends ethereum.Tuple {
  get player(): Address {
    return this[0].toAddress();
  }

  get totalWinnings(): BigInt {
    return this[1].toBigInt();
  }

  get totalBets(): BigInt {
    return this[2].toBigInt();
  }

  get successfulGuesses(): BigInt {
    return this[3].toBigInt();
  }

  get totalGames(): BigInt {
    return this[4].toBigInt();
  }

  get winRate(): BigInt {
    return this[5].toBigInt();
  }

  get netProfit(): BigInt {
    return this[6].toBigInt();
  }

  get biggestWin(): BigInt {
    return this[7].toBigInt();
  }

  get currentWinStreak(): BigInt {
    return this[8].toBigInt();
  }

  get maxWinStreak(): BigInt {
    return this[9].toBigInt();
  }

  get currentLoseStreak(): BigInt {
    return this[10].toBigInt();
  }

  get maxLoseStreak(): BigInt {
    return this[11].toBigInt();
  }

  get avgBet(): BigInt {
    return this[12].toBigInt();
  }

  get totalGasSpent(): BigInt {
    return this[13].toBigInt();
  }

  get favoriteNumber(): BigInt {
    return this[14].toBigInt();
  }
}

export class Management__getPlayerTransactionHistoryResultValue0Struct extends ethereum.Tuple {
  get player(): Address {
    return this[0].toAddress();
  }

  get betAmount(): BigInt {
    return this[1].toBigInt();
  }

  get generatedNumbers(): Array<BigInt> {
    return this[2].toBigIntArray();
  }

  get correctNumber(): BigInt {
    return this[3].toBigInt();
  }

  get userGuess(): BigInt {
    return this[4].toBigInt();
  }

  get payout(): BigInt {
    return this[5].toBigInt();
  }

  get gasUsed(): BigInt {
    return this[6].toBigInt();
  }

  get timestamp(): BigInt {
    return this[7].toBigInt();
  }

  get isWin(): boolean {
    return this[8].toBoolean();
  }
}

export class Management__getPlayerTransactionHistory1ResultValue0Struct extends ethereum.Tuple {
  get player(): Address {
    return this[0].toAddress();
  }

  get betAmount(): BigInt {
    return this[1].toBigInt();
  }

  get generatedNumbers(): Array<BigInt> {
    return this[2].toBigIntArray();
  }

  get correctNumber(): BigInt {
    return this[3].toBigInt();
  }

  get userGuess(): BigInt {
    return this[4].toBigInt();
  }

  get payout(): BigInt {
    return this[5].toBigInt();
  }

  get gasUsed(): BigInt {
    return this[6].toBigInt();
  }

  get timestamp(): BigInt {
    return this[7].toBigInt();
  }

  get isWin(): boolean {
    return this[8].toBoolean();
  }
}

export class Management__getRecentTransactionsResultValue0Struct extends ethereum.Tuple {
  get player(): Address {
    return this[0].toAddress();
  }

  get betAmount(): BigInt {
    return this[1].toBigInt();
  }

  get generatedNumbers(): Array<BigInt> {
    return this[2].toBigIntArray();
  }

  get correctNumber(): BigInt {
    return this[3].toBigInt();
  }

  get userGuess(): BigInt {
    return this[4].toBigInt();
  }

  get payout(): BigInt {
    return this[5].toBigInt();
  }

  get gasUsed(): BigInt {
    return this[6].toBigInt();
  }

  get timestamp(): BigInt {
    return this[7].toBigInt();
  }

  get isWin(): boolean {
    return this[8].toBoolean();
  }
}

export class Management__leaderboardResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getPlayer(): Address {
    return this.value0;
  }

  getTotalWinnings(): BigInt {
    return this.value1;
  }
}

export class Management extends ethereum.SmartContract {
  static bind(address: Address): Management {
    return new Management("Management", address);
  }

  gameContract(): Address {
    let result = super.call("gameContract", "gameContract():(address)", []);

    return result[0].toAddress();
  }

  try_gameContract(): ethereum.CallResult<Address> {
    let result = super.tryCall("gameContract", "gameContract():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  gameHistory(param0: BigInt): Management__gameHistoryResult {
    let result = super.call(
      "gameHistory",
      "gameHistory(uint256):(address,uint256,uint256,uint256,uint256,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new Management__gameHistoryResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBoolean(),
    );
  }

  try_gameHistory(
    param0: BigInt,
  ): ethereum.CallResult<Management__gameHistoryResult> {
    let result = super.tryCall(
      "gameHistory",
      "gameHistory(uint256):(address,uint256,uint256,uint256,uint256,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Management__gameHistoryResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBoolean(),
      ),
    );
  }

  getAllNumberFrequencies(_player: Address): Array<BigInt> {
    let result = super.call(
      "getAllNumberFrequencies",
      "getAllNumberFrequencies(address):(uint256[10])",
      [ethereum.Value.fromAddress(_player)],
    );

    return result[0].toBigIntArray();
  }

  try_getAllNumberFrequencies(
    _player: Address,
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getAllNumberFrequencies",
      "getAllNumberFrequencies(address):(uint256[10])",
      [ethereum.Value.fromAddress(_player)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getLeaderboard(): Array<Management__getLeaderboardResultValue0Struct> {
    let result = super.call(
      "getLeaderboard",
      "getLeaderboard():((address,uint256)[])",
      [],
    );

    return result[0].toTupleArray<Management__getLeaderboardResultValue0Struct>();
  }

  try_getLeaderboard(): ethereum.CallResult<
    Array<Management__getLeaderboardResultValue0Struct>
  > {
    let result = super.tryCall(
      "getLeaderboard",
      "getLeaderboard():((address,uint256)[])",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<Management__getLeaderboardResultValue0Struct>(),
    );
  }

  getNumberFrequency(_player: Address, _number: BigInt): BigInt {
    let result = super.call(
      "getNumberFrequency",
      "getNumberFrequency(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_player),
        ethereum.Value.fromUnsignedBigInt(_number),
      ],
    );

    return result[0].toBigInt();
  }

  try_getNumberFrequency(
    _player: Address,
    _number: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNumberFrequency",
      "getNumberFrequency(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_player),
        ethereum.Value.fromUnsignedBigInt(_number),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPlayerStats(
    _player: Address,
  ): Management__getPlayerStatsResultValue0Struct {
    let result = super.call(
      "getPlayerStats",
      "getPlayerStats(address):((address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromAddress(_player)],
    );

    return changetype<Management__getPlayerStatsResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getPlayerStats(
    _player: Address,
  ): ethereum.CallResult<Management__getPlayerStatsResultValue0Struct> {
    let result = super.tryCall(
      "getPlayerStats",
      "getPlayerStats(address):((address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromAddress(_player)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Management__getPlayerStatsResultValue0Struct>(
        value[0].toTuple(),
      ),
    );
  }

  getPlayerTransactionCount(_player: Address): BigInt {
    let result = super.call(
      "getPlayerTransactionCount",
      "getPlayerTransactionCount(address):(uint256)",
      [ethereum.Value.fromAddress(_player)],
    );

    return result[0].toBigInt();
  }

  try_getPlayerTransactionCount(_player: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPlayerTransactionCount",
      "getPlayerTransactionCount(address):(uint256)",
      [ethereum.Value.fromAddress(_player)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPlayerTransactionHistory(
    _player: Address,
    limit: BigInt,
    offset: BigInt,
  ): Array<Management__getPlayerTransactionHistoryResultValue0Struct> {
    let result = super.call(
      "getPlayerTransactionHistory",
      "getPlayerTransactionHistory(address,uint256,uint256):((address,uint256,uint256[3],uint256,uint256,uint256,uint256,uint256,bool)[])",
      [
        ethereum.Value.fromAddress(_player),
        ethereum.Value.fromUnsignedBigInt(limit),
        ethereum.Value.fromUnsignedBigInt(offset),
      ],
    );

    return result[0].toTupleArray<Management__getPlayerTransactionHistoryResultValue0Struct>();
  }

  try_getPlayerTransactionHistory(
    _player: Address,
    limit: BigInt,
    offset: BigInt,
  ): ethereum.CallResult<
    Array<Management__getPlayerTransactionHistoryResultValue0Struct>
  > {
    let result = super.tryCall(
      "getPlayerTransactionHistory",
      "getPlayerTransactionHistory(address,uint256,uint256):((address,uint256,uint256[3],uint256,uint256,uint256,uint256,uint256,bool)[])",
      [
        ethereum.Value.fromAddress(_player),
        ethereum.Value.fromUnsignedBigInt(limit),
        ethereum.Value.fromUnsignedBigInt(offset),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<Management__getPlayerTransactionHistoryResultValue0Struct>(),
    );
  }

  getPlayerTransactionHistory1(
    _player: Address,
  ): Array<Management__getPlayerTransactionHistory1ResultValue0Struct> {
    let result = super.call(
      "getPlayerTransactionHistory",
      "getPlayerTransactionHistory(address):((address,uint256,uint256[3],uint256,uint256,uint256,uint256,uint256,bool)[])",
      [ethereum.Value.fromAddress(_player)],
    );

    return result[0].toTupleArray<Management__getPlayerTransactionHistory1ResultValue0Struct>();
  }

  try_getPlayerTransactionHistory1(
    _player: Address,
  ): ethereum.CallResult<
    Array<Management__getPlayerTransactionHistory1ResultValue0Struct>
  > {
    let result = super.tryCall(
      "getPlayerTransactionHistory",
      "getPlayerTransactionHistory(address):((address,uint256,uint256[3],uint256,uint256,uint256,uint256,uint256,bool)[])",
      [ethereum.Value.fromAddress(_player)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<Management__getPlayerTransactionHistory1ResultValue0Struct>(),
    );
  }

  getRecentTransactions(
    limit: BigInt,
  ): Array<Management__getRecentTransactionsResultValue0Struct> {
    let result = super.call(
      "getRecentTransactions",
      "getRecentTransactions(uint256):((address,uint256,uint256[3],uint256,uint256,uint256,uint256,uint256,bool)[])",
      [ethereum.Value.fromUnsignedBigInt(limit)],
    );

    return result[0].toTupleArray<Management__getRecentTransactionsResultValue0Struct>();
  }

  try_getRecentTransactions(
    limit: BigInt,
  ): ethereum.CallResult<
    Array<Management__getRecentTransactionsResultValue0Struct>
  > {
    let result = super.tryCall(
      "getRecentTransactions",
      "getRecentTransactions(uint256):((address,uint256,uint256[3],uint256,uint256,uint256,uint256,uint256,bool)[])",
      [ethereum.Value.fromUnsignedBigInt(limit)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<Management__getRecentTransactionsResultValue0Struct>(),
    );
  }

  getTotalTransactions(): BigInt {
    let result = super.call(
      "getTotalTransactions",
      "getTotalTransactions():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getTotalTransactions(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalTransactions",
      "getTotalTransactions():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  leaderboard(param0: BigInt): Management__leaderboardResult {
    let result = super.call(
      "leaderboard",
      "leaderboard(uint256):(address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new Management__leaderboardResult(
      result[0].toAddress(),
      result[1].toBigInt(),
    );
  }

  try_leaderboard(
    param0: BigInt,
  ): ethereum.CallResult<Management__leaderboardResult> {
    let result = super.tryCall(
      "leaderboard",
      "leaderboard(uint256):(address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Management__leaderboardResult(
        value[0].toAddress(),
        value[1].toBigInt(),
      ),
    );
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  playerTransactionIds(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "playerTransactionIds",
      "playerTransactionIds(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );

    return result[0].toBigInt();
  }

  try_playerTransactionIds(
    param0: Address,
    param1: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "playerTransactionIds",
      "playerTransactionIds(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class RecordGameResultCall extends ethereum.Call {
  get inputs(): RecordGameResultCall__Inputs {
    return new RecordGameResultCall__Inputs(this);
  }

  get outputs(): RecordGameResultCall__Outputs {
    return new RecordGameResultCall__Outputs(this);
  }
}

export class RecordGameResultCall__Inputs {
  _call: RecordGameResultCall;

  constructor(call: RecordGameResultCall) {
    this._call = call;
  }

  get player(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get betAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get generatedNumbers(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get correctNumber(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get userGuess(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get payout(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get gasUsed(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class RecordGameResultCall__Outputs {
  _call: RecordGameResultCall;

  constructor(call: RecordGameResultCall) {
    this._call = call;
  }
}

export class SetGameContractCall extends ethereum.Call {
  get inputs(): SetGameContractCall__Inputs {
    return new SetGameContractCall__Inputs(this);
  }

  get outputs(): SetGameContractCall__Outputs {
    return new SetGameContractCall__Outputs(this);
  }
}

export class SetGameContractCall__Inputs {
  _call: SetGameContractCall;

  constructor(call: SetGameContractCall) {
    this._call = call;
  }

  get _gameContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetGameContractCall__Outputs {
  _call: SetGameContractCall;

  constructor(call: SetGameContractCall) {
    this._call = call;
  }
}
